// <auto-generated />
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Shop.Infrastructure.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Core.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("IX_CategoryName")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Self Help",
                            Name = "Self-Help"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Anything technical",
                            Name = "Technical"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Ball",
                            Name = "Ball"
                        });
                });

            modelBuilder.Entity("Core.Entities.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("IX_DepartmentName")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("Department");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Books",
                            Name = "Books"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Sports",
                            Name = "Sports"
                        });
                });

            modelBuilder.Entity("Core.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("varchar(10)");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("ImageMimeType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageName")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductTypeId")
                        .HasColumnType("int");

                    b.Property<int>("QtyInStock")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("ProductTypeId");

                    b.HasIndex("Name", "DepartmentId", "CategoryId", "ProductTypeId")
                        .IsUnique()
                        .HasName("IX_DeptCaegoryProdType")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("Product");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            DepartmentId = 1,
                            Description = "The journey to self discovery",
                            ImageName = "",
                            ImagePath = "",
                            Name = "Ultimate Triumph",
                            Price = 20m,
                            ProductTypeId = 1,
                            QtyInStock = 5,
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            DepartmentId = 1,
                            Description = "Finding truth in the midst of deception and supression",
                            ImageName = "",
                            ImagePath = "",
                            Name = "The Truth",
                            Price = 25m,
                            ProductTypeId = 1,
                            QtyInStock = 3,
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 2,
                            DepartmentId = 1,
                            Description = "Algorithms for solving equations",
                            ImageName = "",
                            ImagePath = "",
                            Name = "Higher Order Differential Equations",
                            Price = 25m,
                            ProductTypeId = 2,
                            QtyInStock = 3,
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 3,
                            DepartmentId = 2,
                            Description = "FIFA-approved size and weight",
                            ImageName = "",
                            ImagePath = "",
                            Name = "Dazzle Ball",
                            Price = 25m,
                            ProductTypeId = 3,
                            QtyInStock = 3,
                            Quantity = 0,
                            Rating = 0
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 3,
                            DepartmentId = 2,
                            Description = "NFL-approved ball",
                            ImageName = "",
                            ImagePath = "",
                            Name = "Spiralling Ball",
                            Price = 15m,
                            ProductTypeId = 4,
                            QtyInStock = 3,
                            Quantity = 0,
                            Rating = 0
                        });
                });

            modelBuilder.Entity("Core.Entities.ProductType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("IX_ProductTypeName")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("ProductType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Self Development"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Mathematics"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Soccer Ball"
                        },
                        new
                        {
                            Id = 4,
                            Name = "NFL Ball"
                        });
                });

            modelBuilder.Entity("Core.Entities.Product", b =>
                {
                    b.HasOne("Core.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.ProductType", "ProductType")
                        .WithMany()
                        .HasForeignKey("ProductTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
